plugins {
    id 'com.gradleup.shadow'
}

architectury {
    platformSetupLoomIde()
    neoForge()
}

repositories {
    maven {
        url "https://maven.saps.dev/mirror"
    }
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    neoForge "net.neoforged:neoforge:${rootProject.neo_forge}"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-neoforge:${rootProject.architectury_version}"

    modRuntimeOnly "me.shedaniel:RoughlyEnoughItems-neoforge:${rootProject.rei_version}"

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionNeoForge')
}

processResources {
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    inputFile.set shadowJar.archiveFile
    setArchivesBaseName("${rootProject.archivesBaseName}-${project.name}") // adds fabric to the maven and curse name

    atAccessWideners.add('justhammers.accesswidener')
}

jar {
    setArchiveClassifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

publishing {
    publications {
        mavenNeoForge(MavenPublication) {
            artifactId = "${rootProject.archivesBaseName}-${project.name}"
            from components.java
        }
    }
}